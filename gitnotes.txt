
##notes on using github for ansible version control - I've played around with a few different ways of how to do it
-------------------------------------------------------

WAY 1 - Command Line

----How to push changes you make locally up to github:----

#step 1: create a github repo

#step 2: copy link of github repo

#step 3: if needed, install git on your machine with "sudo apt update" and "sudo apt install git" 

#step 4: on your control node (main ansible machine), run "git clone <link to github repo>". this will clone your github repo to a new folder 
on your local machine, which should be empty or contain just the README file at the moment

#step 5: if you already have an existing ansible project/ansible files that you want to use version control on, copy those files to the new folder
that was created on your machine - you may need to change some of the file paths in some files like ansible.cfg, vars, etc... now that they are in 
a new folder. If you have not written any ansible files yet (aka you are just starting to use ansible and want to set up the github repo first, 
which is probably the best way), then you do not have to move any files over obviously.

#step 6: run "git config --global user.name <whatever username you want here>" and "git config --global user.email <whatever email you want here>". 
Git will complain when you try to run any commnads if you dont set these. These settings are for showing who is making changes to github

#step 7: run "git status" to see any changes you have made to local files that have not been committed and added to github repo. You can run
this command at anytime to see this information

IMPORTANT NOTE ABOUT HOW GITHUB WORKS: To push any changes you make to files locally, you first have to add those files to a new "commit", then
"commit" those changes including a comment about what changes have been made, and then you can push that commit to the github repo. Basically,
you have a hidden .git folder within your local project that you add changed files to, you then commit those files, which basically says 
"hey i added some new files/changed some files in here, they are also ready to be sent to github", and then you can push them to github 
which will add/overwrite the cooresponding files on github 

#step 8: After you've made changes to any files that you now want to push to github, you can run "git add <file names>" or "git add -A" to add
all files. You can then run "git commit -m <comment about what you changed/are adding>". Your changes have now been commited to your local
.git folder and are ready to be pushed to github

#step 9: You can now run "git push origin main" to push your files to a branch called "main" in github (You can use a different name if you 
want to push to a different branch)


------how to pull changes from github:------------

run "git pull origin main" to pull down any changes in the 'main' branch within your github to your local project

--------------------------------------------------------
--------------------------------------------------------


WAY 2: GitHub Desktop (the easiest method, in my opinion)


----How to push changes you make locally up to github:----

#step 1: Download GitHub Desktop: https://desktop.github.com/ and sign into your GitHub account

#step 2: In the top left, choose existing/create a new repository

#step 3: Once you have linked your local repository to a repository on GitHub, GitHub Desktop will automatically detect 
any changes you make locally to any files within your project and show you those changes.
Once you've reviewed those changes and are ready to push them to GH, add a commit comment in the bottom left specifying
what you are changing/adding, and click commit. This will commit the changes to your local repo. To push those changes 
up to GH, select 'Push Changes' at the top. This will push those changes to whatever branch you have selected at the top.


------how to pull code down from github to your local machine:-------

All you should have to do is have the current branch selected along the top bar that you want to pull from, and then click
"Fetch origin" in the top right which will check to see if GitHub has any changes in any files that you don't have locally,
if it detects any changes, that button you just pushed will now say "Pull Origin" which will pull any new/updated files into
your local repo.

IMPORTANT NOTE: It is a good idea to pull code from github often and especially before you start to make any changes. It's not
a huge deal, however, if you try to push your own changes up to github when someone else has pushed a change to github since
you last pulled the latest build, (i.e. your current version minus your new changes doesn't match the current version on github)
you may get an error/notification telling you to review the differences or to pull the current github version before you can add
your changes.



---------------------------------------
---------------------------------------


WAY 3: Using Git in VSCode (Guide: https://code.visualstudio.com/docs/editor/github#:~:text=Using%20GitHub%20with%20Visual%20Studio%20Code%20lets%20you,install%20the%20GitHub%20Pull%20Requests%20and%20Issues%20extension.)

Use source control tab on left pane of VSCode

WAY 2: GitHub Desktop